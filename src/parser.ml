type token =
  | SEMI
  | COLON
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | COMMA
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | LOGAND
  | LOGOR
  | UEDGE
  | REDGE
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | DEF
  | IN
  | BOOL
  | NUM
  | STRING
  | NODE
  | GRAPH
  | LIST
  | DICT
  | TRUE
  | FALSE
  | INF
  | LITERAL of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 53 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* COLON *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* LBRACKET *);
  264 (* RBRACKET *);
  265 (* COMMA *);
  266 (* DOT *);
  267 (* PLUS *);
  268 (* MINUS *);
  269 (* TIMES *);
  270 (* DIVIDE *);
  271 (* ASSIGN *);
  272 (* EQ *);
  273 (* NEQ *);
  274 (* LT *);
  275 (* LEQ *);
  276 (* GT *);
  277 (* GEQ *);
  278 (* LOGAND *);
  279 (* LOGOR *);
  280 (* UEDGE *);
  281 (* REDGE *);
  282 (* RETURN *);
  283 (* IF *);
  284 (* ELSE *);
  285 (* FOR *);
  286 (* WHILE *);
  287 (* DEF *);
  288 (* IN *);
  289 (* BOOL *);
  290 (* NUM *);
  291 (* STRING *);
  292 (* NODE *);
  293 (* GRAPH *);
  294 (* LIST *);
  295 (* DICT *);
  296 (* TRUE *);
  297 (* FALSE *);
  298 (* INF *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  299 (* LITERAL *);
  300 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\004\000\006\000\006\000\
\009\000\009\000\010\000\010\000\010\000\010\000\007\000\007\000\
\003\000\003\000\003\000\003\000\003\000\017\000\017\000\017\000\
\018\000\018\000\018\000\018\000\018\000\012\000\012\000\012\000\
\012\000\013\000\013\000\013\000\013\000\014\000\014\000\014\000\
\015\000\015\000\015\000\015\000\016\000\016\000\016\000\019\000\
\019\000\021\000\021\000\021\000\021\000\021\000\021\000\008\000\
\008\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\022\000\022\000\020\000\020\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\010\000\000\000\001\000\
\001\000\003\000\003\000\003\000\005\000\005\000\000\000\002\000\
\002\000\002\000\002\000\002\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\004\000\005\000\
\003\000\002\000\005\000\006\000\003\000\002\000\006\000\003\000\
\005\000\009\000\006\000\010\000\007\000\011\000\009\000\001\000\
\003\000\001\000\003\000\003\000\006\000\006\000\009\000\000\000\
\002\000\002\000\002\000\003\000\003\000\005\000\007\000\010\000\
\008\000\001\000\001\000\001\000\001\000\004\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\004\000\003\000\006\000\003\000\
\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\093\000\000\000\000\000\056\000\000\000\000\000\
\000\000\000\000\000\000\022\000\023\000\024\000\000\000\000\000\
\000\000\000\000\068\000\069\000\067\000\066\000\000\000\001\000\
\003\000\004\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\058\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\018\000\000\000\019\000\000\000\
\020\000\000\000\021\000\000\000\000\000\059\000\000\000\088\000\
\061\000\057\000\060\000\000\000\000\000\000\000\000\000\000\000\
\000\000\028\000\029\000\027\000\026\000\025\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\
\000\000\052\000\000\000\000\000\074\000\075\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\085\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\070\000\000\000\000\000\015\000\009\000\000\000\000\000\035\000\
\000\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\000\000\000\000\
\000\000\087\000\054\000\053\000\036\000\000\000\000\000\063\000\
\015\000\016\000\000\000\015\000\010\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\000\000\055\000\000\000\047\000\064\000\006\000\000\000\000\000\
\000\000\044\000\000\000\000\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\003\000\004\000\186\000\026\000\082\000\150\000\169\000\038\000\
\151\000\217\000\028\000\029\000\030\000\031\000\032\000\033\000\
\094\000\095\000\154\000\098\000\035\000\099\000"

let yysindex = "\008\000\
\000\000\000\000\000\000\020\000\035\255\000\000\035\255\018\255\
\020\255\031\255\005\255\000\000\000\000\000\000\023\255\028\255\
\066\255\077\255\000\000\000\000\000\000\000\000\019\001\000\000\
\000\000\000\000\000\000\132\255\013\255\015\255\032\255\061\255\
\062\255\053\255\101\255\155\255\049\001\063\255\172\255\035\255\
\070\255\035\255\087\255\135\255\142\255\237\255\237\255\035\255\
\035\255\103\255\035\255\001\255\004\255\000\000\035\255\035\255\
\035\255\035\255\035\255\035\255\035\255\035\255\035\255\035\255\
\035\255\035\255\000\000\122\255\000\000\127\255\000\000\136\255\
\000\000\179\255\000\000\162\255\196\255\000\000\035\255\000\000\
\000\000\000\000\000\000\069\001\205\255\089\001\236\255\035\255\
\017\000\000\000\000\000\000\000\000\000\000\000\013\000\039\000\
\238\001\043\000\063\000\145\001\068\000\238\001\035\255\000\000\
\035\255\000\000\245\255\245\255\000\000\000\000\018\002\018\002\
\168\000\168\000\168\000\168\000\007\002\251\001\059\000\076\000\
\000\000\237\255\074\000\035\255\161\001\224\255\050\000\112\000\
\053\000\109\001\058\000\071\000\237\255\035\255\000\000\099\000\
\035\255\177\001\193\001\035\255\035\255\118\000\237\255\238\001\
\000\000\115\000\136\000\000\000\000\000\142\000\139\000\000\000\
\057\255\030\255\000\000\156\000\141\000\238\001\165\000\170\000\
\132\000\140\000\238\001\129\001\150\000\174\000\224\255\190\000\
\008\002\194\000\153\000\035\255\000\000\058\000\195\000\159\000\
\035\255\000\000\000\000\000\000\000\000\189\000\237\255\000\000\
\000\000\000\000\082\255\000\000\000\000\209\001\000\000\035\255\
\191\000\225\001\198\000\187\000\008\002\000\000\008\002\099\000\
\217\255\212\000\176\000\035\255\178\000\134\255\176\255\000\000\
\046\000\000\000\104\000\000\000\000\000\000\000\216\000\223\000\
\090\255\000\000\035\255\035\255\000\000\092\000\238\001\238\001\
\224\000\225\000\035\255\035\255\238\001\238\001"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\146\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\064\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\064\255\085\255\000\000\000\000\226\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\133\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\112\255\239\000\000\000\000\000\087\000\109\255\000\000\000\000\
\000\000\000\000\110\000\133\000\000\000\000\000\251\000\015\001\
\009\255\169\000\192\000\215\000\234\255\041\001\199\255\203\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\249\000\000\000\000\000\000\000\000\000\000\000\000\000\228\000\
\226\000\000\000\000\000\000\000\000\000\000\000\000\000\212\255\
\000\000\001\000\000\000\000\000\000\000\000\000\250\000\000\000\
\121\255\000\000\000\000\223\255\000\000\116\000\000\000\000\000\
\000\000\000\000\227\255\000\000\000\000\000\000\000\000\000\000\
\204\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\240\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\204\255\000\000\204\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\150\255\246\255\
\000\000\000\000\000\000\000\000\015\000\060\000"

let yygindex = "\000\000\
\000\000\000\000\224\001\000\000\002\000\000\000\097\000\099\255\
\000\000\000\000\251\255\000\000\000\000\000\000\000\000\000\000\
\255\255\214\255\000\000\071\255\129\255\119\001"

let yytablesize = 815
let yytable = "\037\000\
\062\000\039\000\034\000\155\000\096\000\027\000\201\000\103\000\
\001\000\078\000\105\000\187\000\078\000\067\000\078\000\069\000\
\078\000\078\000\211\000\024\000\040\000\068\000\041\000\070\000\
\078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
\071\000\042\000\084\000\173\000\086\000\005\000\174\000\206\000\
\072\000\207\000\097\000\100\000\104\000\102\000\191\000\106\000\
\043\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\117\000\118\000\073\000\075\000\172\000\
\034\000\005\000\044\000\006\000\081\000\074\000\076\000\045\000\
\034\000\125\000\019\000\020\000\021\000\022\000\036\000\142\000\
\052\000\053\000\130\000\046\000\005\000\038\000\006\000\198\000\
\007\000\008\000\157\000\009\000\010\000\038\000\047\000\221\000\
\077\000\138\000\222\000\139\000\166\000\078\000\019\000\020\000\
\021\000\022\000\023\000\007\000\008\000\084\000\009\000\010\000\
\084\000\085\000\084\000\091\000\084\000\084\000\144\000\091\000\
\091\000\019\000\020\000\021\000\022\000\023\000\050\000\146\000\
\158\000\050\000\087\000\097\000\054\000\030\000\163\000\164\000\
\005\000\088\000\006\000\213\000\196\000\030\000\055\000\056\000\
\057\000\058\000\101\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\012\000\089\000\048\000\012\000\007\000\
\008\000\079\000\009\000\010\000\050\000\119\000\190\000\034\000\
\184\000\051\000\120\000\194\000\083\000\019\000\020\000\021\000\
\022\000\023\000\005\000\121\000\006\000\214\000\055\000\056\000\
\057\000\058\000\097\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\034\000\122\000\034\000\097\000\033\000\
\123\000\007\000\008\000\037\000\009\000\010\000\056\000\033\000\
\056\000\056\000\124\000\037\000\031\000\223\000\224\000\019\000\
\020\000\021\000\022\000\023\000\031\000\229\000\230\000\041\000\
\208\000\134\000\005\000\032\000\006\000\056\000\056\000\041\000\
\056\000\056\000\082\000\032\000\127\000\082\000\129\000\082\000\
\043\000\082\000\082\000\056\000\056\000\056\000\056\000\056\000\
\043\000\007\000\008\000\011\000\009\000\010\000\011\000\082\000\
\082\000\057\000\058\000\062\000\045\000\062\000\062\000\019\000\
\020\000\021\000\022\000\023\000\045\000\012\000\013\000\014\000\
\090\000\091\000\092\000\093\000\014\000\131\000\005\000\014\000\
\006\000\197\000\062\000\062\000\199\000\062\000\062\000\062\000\
\132\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\007\000\008\000\133\000\
\009\000\010\000\011\000\134\000\012\000\013\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\071\000\013\000\135\000\071\000\013\000\071\000\137\000\071\000\
\071\000\140\000\071\000\071\000\071\000\071\000\141\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\086\000\
\215\000\216\000\086\000\143\000\086\000\147\000\086\000\086\000\
\149\000\086\000\086\000\086\000\086\000\153\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\072\000\218\000\
\134\000\072\000\156\000\072\000\148\000\072\000\072\000\092\000\
\072\000\072\000\159\000\092\000\092\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\073\000\225\000\226\000\
\073\000\165\000\073\000\168\000\073\000\073\000\167\000\073\000\
\073\000\170\000\050\000\171\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\071\000\071\000\071\000\071\000\
\176\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\079\000\175\000\177\000\079\000\178\000\079\000\179\000\
\079\000\079\000\055\000\056\000\057\000\058\000\183\000\180\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\080\000\182\000\185\000\080\000\189\000\080\000\188\000\080\000\
\080\000\192\000\193\000\195\000\204\000\202\000\205\000\080\000\
\080\000\080\000\080\000\080\000\080\000\080\000\080\000\081\000\
\209\000\219\000\081\000\210\000\081\000\212\000\081\000\081\000\
\220\000\227\000\228\000\025\000\070\000\089\000\081\000\081\000\
\081\000\081\000\081\000\081\000\081\000\081\000\070\000\070\000\
\070\000\070\000\090\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\076\000\007\000\008\000\076\000\160\000\
\076\000\000\000\076\000\076\000\000\000\000\000\000\000\000\000\
\000\000\000\000\076\000\076\000\000\000\000\000\000\000\077\000\
\076\000\076\000\077\000\000\000\077\000\048\000\077\000\077\000\
\000\000\049\000\000\000\000\000\050\000\000\000\077\000\077\000\
\000\000\051\000\000\000\000\000\077\000\077\000\000\000\000\000\
\000\000\083\000\052\000\053\000\083\000\000\000\083\000\000\000\
\083\000\083\000\000\000\000\000\080\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\056\000\057\000\058\000\083\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\126\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\056\000\057\000\058\000\000\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\128\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\056\000\057\000\058\000\000\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\152\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\056\000\057\000\058\000\000\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\181\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\056\000\057\000\058\000\000\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\136\000\000\000\000\000\055\000\056\000\057\000\058\000\000\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\145\000\000\000\000\000\055\000\056\000\057\000\058\000\000\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\161\000\000\000\000\000\055\000\056\000\057\000\058\000\000\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\162\000\000\000\000\000\055\000\056\000\057\000\058\000\000\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\200\000\000\000\000\000\055\000\056\000\057\000\058\000\000\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\203\000\000\000\000\000\055\000\056\000\057\000\058\000\000\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\055\000\056\000\057\000\058\000\000\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\055\000\056\000\057\000\
\058\000\000\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\055\000\056\000\057\000\058\000\000\000\059\000\060\000\
\061\000\062\000\063\000\064\000\055\000\056\000\057\000\058\000\
\000\000\000\000\000\000\061\000\062\000\063\000\064\000\000\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000"

let yycheck = "\005\000\
\000\000\007\000\004\000\131\000\047\000\004\000\192\000\007\001\
\001\000\001\001\007\001\169\000\004\001\001\001\006\001\001\001\
\008\001\009\001\204\000\000\000\003\001\009\001\003\001\009\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\001\001\003\001\040\000\006\001\042\000\003\001\009\001\197\000\
\009\001\199\000\048\000\049\000\044\001\051\000\174\000\044\001\
\044\001\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\001\001\001\001\007\001\
\001\001\003\001\044\001\005\001\006\001\009\001\009\001\044\001\
\009\001\079\000\040\001\041\001\042\001\043\001\044\001\122\000\
\024\001\025\001\088\000\018\001\003\001\001\001\005\001\006\001\
\026\001\027\001\133\000\029\001\030\001\009\001\018\001\006\001\
\044\001\103\000\009\001\105\000\143\000\001\001\040\001\041\001\
\042\001\043\001\044\001\026\001\027\001\001\001\029\001\030\001\
\004\001\044\001\006\001\004\001\008\001\009\001\124\000\008\001\
\009\001\040\001\041\001\042\001\043\001\044\001\006\001\126\000\
\134\000\009\001\044\001\137\000\001\001\001\001\140\000\141\000\
\003\001\003\001\005\001\006\001\183\000\009\001\011\001\012\001\
\013\001\014\001\044\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\006\001\015\001\003\001\009\001\026\001\
\027\001\007\001\029\001\030\001\010\001\044\001\172\000\169\000\
\167\000\015\001\044\001\177\000\001\001\040\001\041\001\042\001\
\043\001\044\001\003\001\044\001\005\001\006\001\011\001\012\001\
\013\001\014\001\192\000\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\197\000\018\001\199\000\204\000\001\001\
\039\001\026\001\027\001\001\001\029\001\030\001\003\001\009\001\
\005\001\006\001\015\001\009\001\001\001\219\000\220\000\040\001\
\041\001\042\001\043\001\044\001\009\001\227\000\228\000\001\001\
\008\001\009\001\003\001\001\001\005\001\026\001\027\001\009\001\
\029\001\030\001\001\001\009\001\032\001\004\001\003\001\006\001\
\001\001\008\001\009\001\040\001\041\001\042\001\043\001\044\001\
\009\001\026\001\027\001\006\001\029\001\030\001\009\001\022\001\
\023\001\013\001\014\001\003\001\001\001\005\001\006\001\040\001\
\041\001\042\001\043\001\044\001\009\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\006\001\005\001\003\001\009\001\
\005\001\185\000\026\001\027\001\188\000\029\001\030\001\031\001\
\020\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\026\001\027\001\009\001\
\029\001\030\001\031\001\009\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\001\001\006\001\004\001\004\001\009\001\006\001\003\001\008\001\
\009\001\015\001\011\001\012\001\013\001\014\001\003\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\001\001\
\043\001\044\001\004\001\018\001\006\001\044\001\008\001\009\001\
\044\001\011\001\012\001\013\001\014\001\044\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\001\001\008\001\
\009\001\004\001\044\001\006\001\005\001\008\001\009\001\004\001\
\011\001\012\001\024\001\008\001\009\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\001\001\043\001\044\001\
\004\001\020\001\006\001\004\001\008\001\009\001\028\001\011\001\
\012\001\004\001\001\001\009\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\011\001\012\001\013\001\014\001\
\020\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\001\001\015\001\007\001\004\001\004\001\006\001\044\001\
\008\001\009\001\011\001\012\001\013\001\014\001\009\001\044\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\001\001\044\001\005\001\004\001\044\001\006\001\005\001\008\001\
\009\001\007\001\044\001\015\001\007\001\015\001\020\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\001\001\
\005\001\002\001\004\001\044\001\006\001\044\001\008\001\009\001\
\002\001\002\001\002\001\004\000\001\001\004\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\011\001\012\001\
\013\001\014\001\004\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\001\001\004\001\004\001\004\001\137\000\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\255\255\255\255\255\255\001\001\
\022\001\023\001\004\001\255\255\006\001\003\001\008\001\009\001\
\255\255\007\001\255\255\255\255\010\001\255\255\016\001\017\001\
\255\255\015\001\255\255\255\255\022\001\023\001\255\255\255\255\
\255\255\001\001\024\001\025\001\004\001\255\255\006\001\255\255\
\008\001\009\001\255\255\255\255\004\001\255\255\255\255\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\023\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\004\001\255\255\255\255\255\255\255\255\255\255\255\255\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\004\001\255\255\255\255\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\004\001\255\255\255\255\255\255\255\255\255\255\255\255\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\004\001\255\255\255\255\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001"

let yynames_const = "\
  SEMI\000\
  COLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  COMMA\000\
  DOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  LOGAND\000\
  LOGOR\000\
  UEDGE\000\
  REDGE\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  DEF\000\
  IN\000\
  BOOL\000\
  NUM\000\
  STRING\000\
  NODE\000\
  GRAPH\000\
  LIST\000\
  DICT\000\
  TRUE\000\
  FALSE\000\
  INF\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 32 "parser.mly"
            ( _1 )
# 503 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "parser.mly"
                 ( {vars = []; funcs = []; cmds = []} )
# 509 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 43 "parser.mly"
               ( {vars = _1.vars @ _2; funcs = _1.funcs; cmds = _1.cmds} )
# 517 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 44 "parser.mly"
               ( {vars = _1.vars; funcs = _2 :: _1.funcs; cmds = _1.cmds} )
# 525 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 45 "parser.mly"
               ( {vars = _1.vars; funcs = _1.funcs; cmds = _2 :: _1.cmds} )
# 533 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 49 "parser.mly"
     ( { fname = _3;
	 formals = _5;
	 locals = List.rev _8;
	 body = List.rev _9 } )
# 547 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
                  ( [] )
# 553 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 56 "parser.mly"
                  ( List.rev _1 )
# 560 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 59 "parser.mly"
                         ( [_1] )
# 567 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 60 "parser.mly"
                         ( _3 :: _1 )
# 575 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
                  ( [_1] )
# 583 "parser.ml"
               : 'dict_formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                       (  [_1] )
# 591 "parser.ml"
               : 'dict_formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'dict_formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "parser.mly"
                                         ( _3 :: _1 )
# 600 "parser.ml"
               : 'dict_formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'dict_formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                                              ( _3 :: _1 )
# 609 "parser.ml"
               : 'dict_formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
                     ( [] )
# 615 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 70 "parser.mly"
                     ( _1 @ _2 )
# 623 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prim_decl_prefix) in
    Obj.repr(
# 73 "parser.mly"
                         ( List.rev _1 )
# 630 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'node_decl_prefix) in
    Obj.repr(
# 74 "parser.mly"
                         ( List.rev _1 )
# 637 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'graph_decl_prefix) in
    Obj.repr(
# 75 "parser.mly"
                          ( List.rev _1 )
# 644 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'list_decl_prefix) in
    Obj.repr(
# 76 "parser.mly"
                         ( List.rev _1 )
# 651 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dict_decl_prefix) in
    Obj.repr(
# 77 "parser.mly"
                         ( List.rev _1 )
# 658 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
         ( "bool" )
# 664 "parser.ml"
               : 'prim_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
         ( "num" )
# 670 "parser.ml"
               : 'prim_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
         ( "string" )
# 676 "parser.ml"
               : 'prim_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prim_type) in
    Obj.repr(
# 86 "parser.mly"
            ( _1 )
# 683 "parser.ml"
               : 'data_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
        ( "dict" )
# 689 "parser.ml"
               : 'data_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
        ( "list" )
# 695 "parser.ml"
               : 'data_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
        ( "node" )
# 701 "parser.ml"
               : 'data_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
        ( "graph" )
# 707 "parser.ml"
               : 'data_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prim_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
               ( [_2] )
# 715 "parser.ml"
               : 'prim_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'prim_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                           ( [_2] )
# 724 "parser.ml"
               : 'prim_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'prim_decl_prefix) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                                        ( _3 :: _1 )
# 733 "parser.ml"
               : 'prim_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prim_decl_prefix) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 97 "parser.mly"
                            ( _3 :: _1 )
# 741 "parser.ml"
               : 'prim_decl_prefix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "parser.mly"
          ( [_2] )
# 748 "parser.ml"
               : 'node_decl_prefix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                             ( [_2] )
# 756 "parser.ml"
               : 'node_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'node_decl_prefix) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                                               ( _3 :: _1 )
# 765 "parser.ml"
               : 'node_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'node_decl_prefix) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 104 "parser.mly"
                            ( _3 :: _1 )
# 773 "parser.ml"
               : 'node_decl_prefix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "parser.mly"
           ( [_2] )
# 780 "parser.ml"
               : 'graph_decl_prefix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'edge_op_list) in
    Obj.repr(
# 109 "parser.mly"
                                             ( [_2] )
# 788 "parser.ml"
               : 'graph_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'graph_decl_prefix) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
                             ( _3 :: _1 )
# 796 "parser.ml"
               : 'graph_decl_prefix))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'data_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
                          ( [_3] )
# 804 "parser.ml"
               : 'list_decl_prefix))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'data_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_list) in
    Obj.repr(
# 114 "parser.mly"
                                                                ( [_3] )
# 813 "parser.ml"
               : 'list_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'list_decl_prefix) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'data_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 115 "parser.mly"
                                            ( _4 :: _1 )
# 822 "parser.ml"
               : 'list_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : 'list_decl_prefix) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'data_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_list) in
    Obj.repr(
# 116 "parser.mly"
                                                                                  ( _4 :: _1 )
# 832 "parser.ml"
               : 'list_decl_prefix))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'data_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'data_type) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 119 "parser.mly"
                                          ( [_7] )
# 841 "parser.ml"
               : 'dict_decl_prefix))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'data_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'data_type) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'dict_formal_list) in
    Obj.repr(
# 120 "parser.mly"
                                                                                ( [_7] )
# 851 "parser.ml"
               : 'dict_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'dict_decl_prefix) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'data_type) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'data_type) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 121 "parser.mly"
                                                                 ( _9 :: _1 )
# 861 "parser.ml"
               : 'dict_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'edge_op) in
    Obj.repr(
# 127 "parser.mly"
          ( [_1] )
# 868 "parser.ml"
               : 'edge_op_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'edge_op_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'edge_op) in
    Obj.repr(
# 128 "parser.mly"
                             ( _3 :: _1 )
# 876 "parser.ml"
               : 'edge_op_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 131 "parser.mly"
    ( NoOp(_1) )
# 883 "parser.ml"
               : 'edge_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 132 "parser.mly"
               ( Undir(_1, _3) )
# 891 "parser.ml"
               : 'edge_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 133 "parser.mly"
               ( Dir(_1, _3) )
# 899 "parser.ml"
               : 'edge_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 134 "parser.mly"
                                      ( DirVal(_1, _6, _4) )
# 908 "parser.ml"
               : 'edge_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 135 "parser.mly"
                                      ( UndirVal(_1, _6, _4) )
# 917 "parser.ml"
               : 'edge_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 137 "parser.mly"
   ( BidirVal(_3, _1, _9, _7) )
# 927 "parser.ml"
               : 'edge_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "parser.mly"
                   ( [] )
# 933 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 141 "parser.mly"
                   ( _2 :: _1 )
# 941 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
             ( Expr(_1) )
# 948 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'edge_op) in
    Obj.repr(
# 145 "parser.mly"
                 ( Edgeop(_1) )
# 955 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                     ( Return(_2) )
# 962 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 147 "parser.mly"
                            ( Block(List.rev _2) )
# 969 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 148 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 977 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 149 "parser.mly"
                                            ( If(_3, _5, _7) )
# 986 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 151 "parser.mly"
     ( For(_3, _5, _8, _9) )
# 996 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 152 "parser.mly"
                                                                ( While(_3, _6, _7) )
# 1005 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 161 "parser.mly"
                     ( Literal(_1) )
# 1012 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "parser.mly"
                     ( Literal("INF") )
# 1018 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "parser.mly"
                     ( Boolean(True) )
# 1024 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 164 "parser.mly"
                     ( Boolean(False) )
# 1030 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 165 "parser.mly"
                              ( Access(_1, _3) )
# 1038 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 166 "parser.mly"
                     ( Id(_1) )
# 1045 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 1053 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 1061 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 1069 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 1077 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 1085 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 1093 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 1101 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 1109 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                     ( Binop(_1, Greater,  _3) )
# 1117 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 176 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 1125 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
                     ( LogAnd(_1, _3) )
# 1133 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
                    ( LogOr(_1, _3) )
# 1141 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
                     ( Assign(_1, _3) )
# 1149 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 180 "parser.mly"
                                 ( Call(_1, _3) )
# 1157 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 181 "parser.mly"
                           ( MemberVar(_1, _3) )
# 1165 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 182 "parser.mly"
                                        ( MemberCall(_1, _3, _5) )
# 1174 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                       ( _2 )
# 1181 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "parser.mly"
                  ( [] )
# 1187 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 187 "parser.mly"
                  ( List.rev _1 )
# 1194 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 190 "parser.mly"
                            ( [_1] )
# 1201 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 191 "parser.mly"
                            ( _3 :: _1 )
# 1209 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
