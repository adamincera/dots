type token =
  | SEMI
  | COLON
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | COMMA
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | LOGAND
  | LOGOR
  | UEDGE
  | REDGE
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | DEF
  | IN
  | BOOL
  | NUM
  | STRING
  | NODE
  | GRAPH
  | LIST
  | DICT
  | TRUE
  | FALSE
  | INF
  | LITERAL of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 53 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* COLON *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* LBRACKET *);
  264 (* RBRACKET *);
  265 (* COMMA *);
  266 (* DOT *);
  267 (* PLUS *);
  268 (* MINUS *);
  269 (* TIMES *);
  270 (* DIVIDE *);
  271 (* ASSIGN *);
  272 (* EQ *);
  273 (* NEQ *);
  274 (* LT *);
  275 (* LEQ *);
  276 (* GT *);
  277 (* GEQ *);
  278 (* LOGAND *);
  279 (* LOGOR *);
  280 (* UEDGE *);
  281 (* REDGE *);
  282 (* RETURN *);
  283 (* IF *);
  284 (* ELSE *);
  285 (* FOR *);
  286 (* WHILE *);
  287 (* DEF *);
  288 (* IN *);
  289 (* BOOL *);
  290 (* NUM *);
  291 (* STRING *);
  292 (* NODE *);
  293 (* GRAPH *);
  294 (* LIST *);
  295 (* DICT *);
  296 (* TRUE *);
  297 (* FALSE *);
  298 (* INF *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  299 (* LITERAL *);
  300 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\004\000\006\000\006\000\
\009\000\009\000\010\000\010\000\010\000\007\000\007\000\003\000\
\003\000\003\000\003\000\003\000\017\000\017\000\017\000\018\000\
\018\000\018\000\018\000\018\000\012\000\012\000\012\000\012\000\
\013\000\013\000\013\000\013\000\014\000\014\000\014\000\015\000\
\015\000\015\000\015\000\016\000\016\000\016\000\019\000\019\000\
\019\000\021\000\021\000\021\000\021\000\021\000\008\000\008\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\022\000\
\022\000\020\000\020\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\010\000\000\000\001\000\
\001\000\003\000\003\000\003\000\005\000\000\000\002\000\002\000\
\002\000\002\000\002\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\004\000\005\000\003\000\
\002\000\005\000\006\000\003\000\002\000\006\000\003\000\005\000\
\009\000\006\000\010\000\007\000\011\000\009\000\001\000\001\000\
\003\000\003\000\003\000\006\000\006\000\009\000\000\000\002\000\
\002\000\002\000\003\000\003\000\005\000\007\000\010\000\008\000\
\001\000\001\000\001\000\001\000\004\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\004\000\003\000\006\000\003\000\000\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\092\000\000\000\000\000\055\000\000\000\000\000\
\000\000\000\000\000\000\021\000\022\000\023\000\000\000\000\000\
\000\000\000\000\067\000\068\000\066\000\065\000\000\000\001\000\
\003\000\004\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\057\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\000\000\017\000\000\000\018\000\000\000\
\019\000\000\000\020\000\000\000\000\000\058\000\000\000\087\000\
\060\000\056\000\059\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\000\028\000\026\000\025\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\050\000\
\000\000\051\000\000\000\000\000\073\000\074\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\084\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\069\000\000\000\000\000\014\000\009\000\000\000\000\000\034\000\
\000\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\000\000\000\000\
\000\000\086\000\053\000\052\000\035\000\000\000\000\000\062\000\
\014\000\015\000\000\000\014\000\010\000\000\000\000\000\049\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\000\000\054\000\000\000\046\000\063\000\006\000\000\000\
\000\000\000\000\043\000\000\000\000\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\003\000\004\000\186\000\026\000\082\000\150\000\169\000\038\000\
\151\000\218\000\028\000\029\000\030\000\031\000\032\000\033\000\
\094\000\095\000\154\000\098\000\035\000\099\000"

let yysindex = "\014\000\
\000\000\000\000\000\000\020\000\035\255\000\000\035\255\033\255\
\037\255\039\255\005\255\000\000\000\000\000\000\023\255\028\255\
\066\255\077\255\000\000\000\000\000\000\000\000\042\001\000\000\
\000\000\000\000\000\000\011\255\017\255\061\255\062\255\064\255\
\085\255\053\255\101\255\006\255\067\001\063\255\132\255\035\255\
\087\255\035\255\094\255\111\255\193\255\238\255\238\255\035\255\
\035\255\103\255\035\255\001\255\004\255\000\000\035\255\035\255\
\035\255\035\255\035\255\035\255\035\255\035\255\035\255\035\255\
\035\255\035\255\000\000\141\255\000\000\154\255\000\000\186\255\
\000\000\219\255\000\000\212\255\217\255\000\000\035\255\000\000\
\000\000\000\000\000\000\087\001\225\255\107\001\019\000\035\255\
\254\255\000\000\000\000\000\000\000\000\000\000\004\000\017\000\
\000\002\024\000\025\000\163\001\045\000\000\002\035\255\000\000\
\035\255\000\000\053\000\053\000\000\000\000\000\036\002\036\002\
\236\255\236\255\236\255\236\255\025\002\013\002\037\000\066\000\
\000\000\238\255\056\000\035\255\179\001\226\255\027\000\074\000\
\048\000\127\001\050\000\058\000\238\255\035\255\000\000\091\000\
\035\255\195\001\211\001\035\255\035\255\077\000\238\255\000\002\
\000\000\089\000\116\000\000\000\000\000\119\000\115\000\000\000\
\057\255\008\255\000\000\120\000\105\000\000\002\129\000\134\000\
\096\000\099\000\000\002\147\001\102\000\138\000\226\255\143\000\
\026\002\153\000\117\000\035\255\000\000\122\000\152\000\123\000\
\035\255\000\000\000\000\000\000\000\000\148\000\238\255\000\000\
\000\000\000\000\082\255\000\000\000\000\227\001\057\255\000\000\
\035\255\154\000\243\001\161\000\150\000\026\002\000\000\026\002\
\091\000\081\000\166\000\137\000\035\255\140\000\134\255\177\255\
\000\000\221\255\000\000\104\000\000\000\000\000\000\000\180\000\
\184\000\090\255\000\000\035\255\035\255\000\000\145\000\000\002\
\000\002\188\000\035\255\000\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\222\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\064\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\133\255\156\255\000\000\000\000\187\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\157\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\112\255\189\000\000\000\000\000\087\000\109\255\000\000\000\000\
\000\000\000\000\110\000\133\000\000\000\000\000\005\001\025\001\
\156\000\179\000\202\000\225\000\031\001\054\001\161\255\170\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\190\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\
\187\000\000\000\000\000\000\000\000\000\000\000\000\000\172\255\
\000\000\001\000\000\000\000\000\000\000\000\000\200\000\000\000\
\121\255\000\000\000\000\183\255\000\000\187\255\000\000\000\000\
\000\000\000\000\185\255\000\000\000\000\000\000\000\000\000\000\
\184\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\192\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\245\255\000\000\000\000\000\000\184\255\000\000\184\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\150\255\
\196\255\000\000\000\000\203\255"

let yygindex = "\000\000\
\000\000\000\000\188\001\000\000\002\000\000\000\073\000\097\255\
\000\000\000\000\251\255\000\000\000\000\000\000\000\000\000\000\
\255\255\214\255\000\000\070\255\129\255\068\001"

let yytablesize = 833
let yytable = "\037\000\
\061\000\039\000\034\000\155\000\096\000\027\000\202\000\103\000\
\048\000\187\000\105\000\054\000\079\000\173\000\001\000\050\000\
\174\000\067\000\212\000\024\000\051\000\055\000\056\000\057\000\
\058\000\068\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\084\000\040\000\086\000\005\000\207\000\041\000\
\208\000\042\000\097\000\100\000\104\000\102\000\192\000\106\000\
\043\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\117\000\118\000\069\000\071\000\172\000\
\073\000\005\000\044\000\006\000\081\000\070\000\072\000\045\000\
\074\000\125\000\019\000\020\000\021\000\022\000\036\000\142\000\
\052\000\053\000\130\000\046\000\005\000\075\000\006\000\199\000\
\007\000\008\000\157\000\009\000\010\000\076\000\047\000\222\000\
\077\000\138\000\223\000\139\000\166\000\078\000\019\000\020\000\
\021\000\022\000\023\000\007\000\008\000\083\000\009\000\010\000\
\083\000\088\000\083\000\090\000\083\000\083\000\144\000\090\000\
\090\000\019\000\020\000\021\000\022\000\023\000\047\000\146\000\
\158\000\047\000\085\000\097\000\083\000\033\000\163\000\164\000\
\005\000\087\000\006\000\214\000\197\000\033\000\055\000\056\000\
\057\000\058\000\101\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\012\000\037\000\029\000\012\000\007\000\
\008\000\032\000\009\000\010\000\037\000\029\000\190\000\034\000\
\184\000\032\000\036\000\195\000\030\000\019\000\020\000\021\000\
\022\000\023\000\036\000\005\000\030\000\006\000\215\000\040\000\
\119\000\031\000\055\000\097\000\055\000\055\000\091\000\040\000\
\042\000\031\000\091\000\091\000\034\000\120\000\034\000\097\000\
\042\000\011\000\007\000\008\000\011\000\009\000\010\000\089\000\
\013\000\055\000\055\000\013\000\055\000\055\000\224\000\225\000\
\019\000\020\000\021\000\022\000\023\000\228\000\070\000\055\000\
\055\000\055\000\055\000\055\000\005\000\121\000\006\000\124\000\
\070\000\070\000\070\000\070\000\122\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\044\000\055\000\056\000\
\057\000\058\000\123\000\007\000\008\000\044\000\009\000\010\000\
\127\000\198\000\131\000\061\000\200\000\061\000\061\000\216\000\
\217\000\019\000\020\000\021\000\022\000\023\000\012\000\013\000\
\014\000\090\000\091\000\092\000\093\000\129\000\005\000\132\000\
\006\000\133\000\061\000\061\000\135\000\061\000\061\000\061\000\
\134\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\007\000\008\000\137\000\
\009\000\010\000\011\000\140\000\012\000\013\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\070\000\057\000\058\000\070\000\141\000\070\000\147\000\070\000\
\070\000\143\000\070\000\070\000\070\000\070\000\148\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\085\000\
\209\000\134\000\085\000\149\000\085\000\153\000\085\000\085\000\
\165\000\085\000\085\000\085\000\085\000\156\000\085\000\085\000\
\085\000\085\000\085\000\085\000\085\000\085\000\071\000\219\000\
\134\000\071\000\159\000\071\000\167\000\071\000\071\000\168\000\
\071\000\071\000\170\000\171\000\176\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\072\000\175\000\177\000\
\072\000\178\000\072\000\179\000\072\000\072\000\180\000\072\000\
\072\000\182\000\183\000\185\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\077\000\188\000\193\000\077\000\
\189\000\077\000\196\000\077\000\077\000\191\000\194\000\205\000\
\203\000\206\000\210\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\078\000\211\000\220\000\078\000\213\000\
\078\000\221\000\078\000\078\000\226\000\227\000\088\000\025\000\
\089\000\007\000\078\000\078\000\078\000\078\000\078\000\078\000\
\078\000\078\000\079\000\008\000\160\000\079\000\000\000\079\000\
\000\000\079\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\080\000\000\000\000\000\080\000\000\000\080\000\000\000\
\080\000\080\000\000\000\000\000\000\000\000\000\069\000\000\000\
\080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\069\000\069\000\069\000\069\000\000\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\075\000\000\000\000\000\
\075\000\000\000\075\000\000\000\075\000\075\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\000\075\000\000\000\000\000\
\000\000\076\000\075\000\075\000\076\000\000\000\076\000\081\000\
\076\000\076\000\081\000\000\000\081\000\000\000\081\000\081\000\
\076\000\076\000\000\000\000\000\048\000\000\000\076\000\076\000\
\049\000\000\000\000\000\050\000\081\000\081\000\082\000\000\000\
\051\000\082\000\000\000\082\000\000\000\082\000\082\000\000\000\
\000\000\052\000\053\000\000\000\000\000\000\000\080\000\000\000\
\000\000\000\000\000\000\000\000\082\000\055\000\056\000\057\000\
\058\000\000\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\126\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\056\000\057\000\058\000\000\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\128\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\056\000\057\000\
\058\000\000\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\152\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\056\000\057\000\058\000\000\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\181\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\056\000\057\000\
\058\000\000\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\136\000\000\000\000\000\055\000\056\000\057\000\
\058\000\000\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\145\000\000\000\000\000\055\000\056\000\057\000\
\058\000\000\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\161\000\000\000\000\000\055\000\056\000\057\000\
\058\000\000\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\162\000\000\000\000\000\055\000\056\000\057\000\
\058\000\000\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\201\000\000\000\000\000\055\000\056\000\057\000\
\058\000\000\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\204\000\000\000\000\000\055\000\056\000\057\000\
\058\000\000\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\055\000\056\000\057\000\058\000\000\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\055\000\
\056\000\057\000\058\000\000\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\055\000\056\000\057\000\058\000\000\000\
\059\000\060\000\061\000\062\000\063\000\064\000\055\000\056\000\
\057\000\058\000\000\000\000\000\000\000\061\000\062\000\063\000\
\064\000\000\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000"

let yycheck = "\005\000\
\000\000\007\000\004\000\131\000\047\000\004\000\193\000\007\001\
\003\001\169\000\007\001\001\001\007\001\006\001\001\000\010\001\
\009\001\001\001\205\000\000\000\015\001\011\001\012\001\013\001\
\014\001\009\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\040\000\003\001\042\000\003\001\198\000\003\001\
\200\000\003\001\048\000\049\000\044\001\051\000\174\000\044\001\
\044\001\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\001\001\001\001\007\001\
\001\001\003\001\044\001\005\001\006\001\009\001\009\001\044\001\
\009\001\079\000\040\001\041\001\042\001\043\001\044\001\122\000\
\024\001\025\001\088\000\018\001\003\001\001\001\005\001\006\001\
\026\001\027\001\133\000\029\001\030\001\009\001\018\001\006\001\
\044\001\103\000\009\001\105\000\143\000\001\001\040\001\041\001\
\042\001\043\001\044\001\026\001\027\001\001\001\029\001\030\001\
\004\001\003\001\006\001\004\001\008\001\009\001\124\000\008\001\
\009\001\040\001\041\001\042\001\043\001\044\001\006\001\126\000\
\134\000\009\001\044\001\137\000\001\001\001\001\140\000\141\000\
\003\001\044\001\005\001\006\001\183\000\009\001\011\001\012\001\
\013\001\014\001\044\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\006\001\001\001\001\001\009\001\026\001\
\027\001\001\001\029\001\030\001\009\001\009\001\172\000\169\000\
\167\000\009\001\001\001\177\000\001\001\040\001\041\001\042\001\
\043\001\044\001\009\001\003\001\009\001\005\001\006\001\001\001\
\044\001\001\001\003\001\193\000\005\001\006\001\004\001\009\001\
\001\001\009\001\008\001\009\001\198\000\044\001\200\000\205\000\
\009\001\006\001\026\001\027\001\009\001\029\001\030\001\015\001\
\006\001\026\001\027\001\009\001\029\001\030\001\220\000\221\000\
\040\001\041\001\042\001\043\001\044\001\227\000\001\001\040\001\
\041\001\042\001\043\001\044\001\003\001\044\001\005\001\015\001\
\011\001\012\001\013\001\014\001\018\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\001\001\011\001\012\001\
\013\001\014\001\039\001\026\001\027\001\009\001\029\001\030\001\
\032\001\185\000\005\001\003\001\188\000\005\001\006\001\043\001\
\044\001\040\001\041\001\042\001\043\001\044\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\003\001\003\001\020\001\
\005\001\009\001\026\001\027\001\004\001\029\001\030\001\031\001\
\009\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\026\001\027\001\003\001\
\029\001\030\001\031\001\015\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\001\001\013\001\014\001\004\001\003\001\006\001\044\001\008\001\
\009\001\018\001\011\001\012\001\013\001\014\001\005\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\001\001\
\008\001\009\001\004\001\044\001\006\001\044\001\008\001\009\001\
\020\001\011\001\012\001\013\001\014\001\044\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\001\001\008\001\
\009\001\004\001\024\001\006\001\028\001\008\001\009\001\004\001\
\011\001\012\001\004\001\009\001\020\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\001\001\015\001\007\001\
\004\001\004\001\006\001\044\001\008\001\009\001\044\001\011\001\
\012\001\044\001\009\001\005\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\001\001\005\001\007\001\004\001\
\044\001\006\001\015\001\008\001\009\001\044\001\044\001\007\001\
\015\001\020\001\005\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\001\001\044\001\002\001\004\001\044\001\
\006\001\002\001\008\001\009\001\044\001\002\001\004\001\004\000\
\004\001\004\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\001\001\004\001\137\000\004\001\255\255\006\001\
\255\255\008\001\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\001\001\255\255\255\255\004\001\255\255\006\001\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\001\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\001\001\255\255\255\255\
\004\001\255\255\006\001\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\255\255\255\255\
\255\255\001\001\022\001\023\001\004\001\255\255\006\001\001\001\
\008\001\009\001\004\001\255\255\006\001\255\255\008\001\009\001\
\016\001\017\001\255\255\255\255\003\001\255\255\022\001\023\001\
\007\001\255\255\255\255\010\001\022\001\023\001\001\001\255\255\
\015\001\004\001\255\255\006\001\255\255\008\001\009\001\255\255\
\255\255\024\001\025\001\255\255\255\255\255\255\004\001\255\255\
\255\255\255\255\255\255\255\255\023\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\004\001\255\255\255\255\255\255\255\255\255\255\
\255\255\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\004\001\255\255\
\255\255\255\255\255\255\255\255\255\255\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\004\001\255\255\255\255\255\255\255\255\255\255\
\255\255\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\004\001\255\255\
\255\255\255\255\255\255\255\255\255\255\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\008\001\255\255\255\255\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\008\001\255\255\255\255\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\008\001\255\255\255\255\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\008\001\255\255\255\255\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\008\001\255\255\255\255\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\008\001\255\255\255\255\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\011\001\012\001\
\013\001\014\001\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001"

let yynames_const = "\
  SEMI\000\
  COLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  COMMA\000\
  DOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  LOGAND\000\
  LOGOR\000\
  UEDGE\000\
  REDGE\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  DEF\000\
  IN\000\
  BOOL\000\
  NUM\000\
  STRING\000\
  NODE\000\
  GRAPH\000\
  LIST\000\
  DICT\000\
  TRUE\000\
  FALSE\000\
  INF\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 32 "parser.mly"
            ( _1 )
# 509 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
                 ( {vars = []; funcs = []; cmds = []} )
# 515 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 36 "parser.mly"
               ( {vars : concat(_2, _1.vars); funcs: _1.funcs; cmds : _1.cmds} )
# 523 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 37 "parser.mly"
               ( {vars : _1.vars; funcs: concat(_2, _1.funcs); cmds : _1.cmds} )
# 531 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 38 "parser.mly"
               ( {vars : _1.vars; funcs: _1.funcs; cmds : _2 :: _1.cmds} )
# 539 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 42 "parser.mly"
     ( { fname = _3;
	 formals = _5;
	 locals = List.rev _8;
	 body = List.rev _9 } )
# 553 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "parser.mly"
                  ( [] )
# 559 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 49 "parser.mly"
                  ( List.rev _1 )
# 566 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 52 "parser.mly"
                         ( [_1] )
# 573 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 53 "parser.mly"
                         ( _3 :: _1 )
# 581 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                  ( _1 )
# 589 "parser.ml"
               : 'dict_formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                       ( _1 )
# 597 "parser.ml"
               : 'dict_formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'dict_formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                                         ( _3 :: _1 )
# 606 "parser.ml"
               : 'dict_formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                     ( [] )
# 612 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 62 "parser.mly"
                     ( concat(_2, _1) )
# 620 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prim_decl_prefix) in
    Obj.repr(
# 65 "parser.mly"
                         ( List.rev _1 )
# 627 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'node_decl_prefix) in
    Obj.repr(
# 66 "parser.mly"
                         ( List.rev _1 )
# 634 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'graph_decl_prefix) in
    Obj.repr(
# 67 "parser.mly"
                          ( List.rev _1 )
# 641 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'list_decl_prefix) in
    Obj.repr(
# 68 "parser.mly"
                         ( List.rev _1 )
# 648 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dict_decl_prefix) in
    Obj.repr(
# 69 "parser.mly"
                         ( List.rev _1 )
# 655 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
         ( "bool" )
# 661 "parser.ml"
               : 'prim_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
         ( "num" )
# 667 "parser.ml"
               : 'prim_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
         ( "string" )
# 673 "parser.ml"
               : 'prim_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prim_type) in
    Obj.repr(
# 78 "parser.mly"
            ( _1 )
# 680 "parser.ml"
               : 'data_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
        ( "dict" )
# 686 "parser.ml"
               : 'data_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
        ( "list" )
# 692 "parser.ml"
               : 'data_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
        ( "node" )
# 698 "parser.ml"
               : 'data_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
        ( "graph" )
# 704 "parser.ml"
               : 'data_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prim_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 86 "parser.mly"
               ( [_2] )
# 712 "parser.ml"
               : 'prim_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'prim_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                           ( [_2] )
# 721 "parser.ml"
               : 'prim_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'prim_decl_prefix) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                                        ( _3 :: _1 )
# 730 "parser.ml"
               : 'prim_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prim_decl_prefix) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 89 "parser.mly"
                            ( _3 :: _1 )
# 738 "parser.ml"
               : 'prim_decl_prefix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 93 "parser.mly"
          ( [_2] )
# 745 "parser.ml"
               : 'node_decl_prefix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                             ( [_2] )
# 753 "parser.ml"
               : 'node_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'node_decl_prefix) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                                               ( _3 :: _1 )
# 762 "parser.ml"
               : 'node_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'node_decl_prefix) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 96 "parser.mly"
                            ( _3 :: _1 )
# 770 "parser.ml"
               : 'node_decl_prefix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 100 "parser.mly"
           ( [_2] )
# 777 "parser.ml"
               : 'graph_decl_prefix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'edge_op_list) in
    Obj.repr(
# 101 "parser.mly"
                                             ( [_2] )
# 785 "parser.ml"
               : 'graph_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'graph_decl_prefix) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "parser.mly"
                             ( _3 :: _1 )
# 793 "parser.ml"
               : 'graph_decl_prefix))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'data_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 105 "parser.mly"
                          ( [_3] )
# 801 "parser.ml"
               : 'list_decl_prefix))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'data_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_list) in
    Obj.repr(
# 106 "parser.mly"
                                                                ( [_3] )
# 810 "parser.ml"
               : 'list_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'list_decl_prefix) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'data_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "parser.mly"
                                            ( _4 :: _1 )
# 819 "parser.ml"
               : 'list_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : 'list_decl_prefix) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'data_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_list) in
    Obj.repr(
# 108 "parser.mly"
                                                                                  ( _4 :: _1 )
# 829 "parser.ml"
               : 'list_decl_prefix))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'data_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'data_type) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 111 "parser.mly"
                                          ( [_7] )
# 838 "parser.ml"
               : 'dict_decl_prefix))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'data_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'data_type) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'dict_formal_list) in
    Obj.repr(
# 112 "parser.mly"
                                                                                ( [_7] )
# 848 "parser.ml"
               : 'dict_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'dict_decl_prefix) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'data_type) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'data_type) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
                                                                 ( _9 :: _1 )
# 858 "parser.ml"
               : 'dict_decl_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 119 "parser.mly"
     ( [_1] )
# 865 "parser.ml"
               : 'edge_op_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'edge_op) in
    Obj.repr(
# 120 "parser.mly"
          ( [_1] )
# 872 "parser.ml"
               : 'edge_op_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'edge_op_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'edge_op) in
    Obj.repr(
# 121 "parser.mly"
                             ( _3 :: _1 )
# 880 "parser.ml"
               : 'edge_op_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 124 "parser.mly"
               ( Undir(_1, _3) )
# 888 "parser.ml"
               : 'edge_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 125 "parser.mly"
               ( Dir(_1, _3) )
# 896 "parser.ml"
               : 'edge_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 126 "parser.mly"
                                      ( DirVal(_1, _6, _4) )
# 905 "parser.ml"
               : 'edge_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 127 "parser.mly"
                                      ( UndirVal(_1, _6, _4) )
# 914 "parser.ml"
               : 'edge_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 129 "parser.mly"
   ( BidirVal(_3, _1, _9, _7) )
# 924 "parser.ml"
               : 'edge_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 132 "parser.mly"
                   ( [] )
# 930 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 133 "parser.mly"
                   ( _2 :: _1 )
# 938 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
              ( Expr(_1) )
# 945 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'edge_op) in
    Obj.repr(
# 137 "parser.mly"
                 ( Edgeop(_1) )
# 952 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                     ( Return(_2) )
# 959 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 139 "parser.mly"
                            ( Block(List.rev _2) )
# 966 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 140 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 974 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 141 "parser.mly"
                                            ( If(_3, _5, _7) )
# 983 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 143 "parser.mly"
     ( For(_3, _5, _8, _9) )
# 993 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 144 "parser.mly"
                                                                ( While(_3, _6, _7) )
# 1002 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 153 "parser.mly"
                     ( Literal(_1) )
# 1009 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
                     ( Literal("INF"))
# 1015 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "parser.mly"
                     ( Boolean(True) )
# 1021 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "parser.mly"
                     ( Boolean(False) )
# 1027 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                              ( Access(_1, _3) )
# 1035 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 158 "parser.mly"
                     ( Id(_1) )
# 1042 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 1050 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 1058 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 1066 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 1074 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 1082 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 1090 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 1098 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 1106 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
                     ( Binop(_1, Greater,  _3) )
# 1114 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 1122 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                     ( LogAnd(_1, _3) )
# 1130 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
                    ( LogOr(_1, _3) )
# 1138 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                     ( Assign(_1, _3) )
# 1146 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 172 "parser.mly"
                                 ( Call(_1, _3) )
# 1154 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 173 "parser.mly"
                           ( MemberVar(_1, _3) )
# 1162 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 174 "parser.mly"
                                        ( MemberCall(_1, _3, _5) )
# 1171 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                       ( _2 )
# 1178 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "parser.mly"
                  ( [] )
# 1184 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 179 "parser.mly"
                  ( List.rev _1 )
# 1191 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                            ( [_1] )
# 1198 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                            ( _3 :: _1 )
# 1206 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
