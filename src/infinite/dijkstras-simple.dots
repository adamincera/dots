/* 
 * Djikstra's algorithm: calculates shortest paths starting 
 * from the source node and returns a dict of the lowest cost
 * to destination nodes
 */

/* Graph set-up */
node x("dc");
node y("chicago");
node z("philly");
node q("nyc"); 
node r("boston");

graph g1 = {
    x --[2] z,
    z --[2] q,
    q --[3] r,
    z --[9] r,
    x --[8] y,
    y --[9] r
};

/* end Graph set-up */

/* find the min costs from "philly" to all other cities: */
dict<node, num> min_costs;
dict<node, num> Q;

for (n in g1) {
    Q[n] = 99999;
}
Q[z] = 0;

node u;
num w;
while (len(Q) != 0) {
    u = min(Q);
    w = Q[u];
    Q.remove(u);
    min_costs[u] = w;
    for (v in u.oute()) {
        if (Q[v] > u.oute()[v]) {
            Q[v] = u.oute()[v];
        }
    }
}
