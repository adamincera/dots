#breadth first search

print("Searching\n");

def bool has_node (list<node> l, node x) {
	for (n in l) {
	    if (n == x) {
	       return true;
	    }
	}
	return false;
}

graph g;

node x("x");
node y("y");
node z("z");

node a("a");
node b("b");
node c("c");

g = x + y;
g = g + z;

x -->[2] y;
x -->[1.5] z;	
z -->[4] y;
y -->[2] c;
z -->[2.5] b;
c -->[.5] b;
x -->[333] a;
z -->[15] a; 

print("Graph Initialized\n");

list<node> queue;
list<node> seen;
dict<node, num> dist;
 
queue.enqueue(x);

node cur_node;
#cur_node = x;

num curr_dist;
curr_dist = 0;

num l;
l = len(queue);
	dict<node, num> d;
while (l > 0) {
	cur_node = queue.peek();
	queue.dequeue();
    #print("current node: ", cur_node, "\n", "\n");
	curr_dist = curr_dist + 1;

	d = cur_node.oute();
print("running\n");
    for (n in d){
    print("foo\n");
        #print("Number of outgoing edges: ", len(cur_node.oute()));
    
		if (has_node(seen, n) == false) {
		    seen.enqueue(n);
		    queue.enqueue(n);
		    dist[n] = curr_dist;
		}
		
	
	}
	

	l = len(queue);	

}

print(dist);